pipeline {
    agent {
        kubernetes {
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: my-jenkins-agent
spec:
  containers:
  - name: jnlp
    image: 'jenkins/inbound-agent:latest'
  - name: python
    image: 'win5923/python:3.8.16-alpine3.17'
    command:
    - sleep
    - '99d'
    securityContext:
        runAsUser: 1000
        runAsGroup: 1000
    resources:
      limits:
        cpu: '1'
        memory: '512Mi'
"""
        }
    }

    // triggers {
    //     pollSCM '*/5 * * * *'
    // }
    stages {
        stage('git clone Getac Camera test Project') {
            steps {
                container('python') {
                    checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'master']],
                    extensions: [
                    [$class: 'SparseCheckoutPaths', 
                    sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:'/getac-camera-test']]]
                    ],
                    userRemoteConfigs: [[url: 'https://gitea.getac.com/ASRDD/automated-android-functional-test.git', credentialsId: 'blocka_gitea']]
                ])
                }
            }
        }

        stage('Run test') {
            parallel {
                stage ('RKCXXZ0102'){
                    steps {
                    container('python') {
                        dir('getac-camera-test') {
                            sh 'pwd'
                            sh 'ls -l'
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    sh 'pytest test/ --udid RL1XXZ0007 --platform-version 9 --alluredir allure-results'
                                } 
                            }
                        }
                    }
                }
                stage ('RKCXXZ0140'){
                    steps {
                    container('python') {
                        dir('getac-camera-test') {
                            sh 'pwd'
                            sh 'ls -l'
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    sh 'pytest test/ --udid RL1XXZ0007 --platform-version 10 --alluredir allure-results'
                                }   
                            }
                        }
                    }
                }
            }
        }
    stage('Generate Allure Report') {
        steps {
            dir('getac-camera-test') {
                sh 'ls -l'
                //sh 'cp -R /home/jenkins/agent/workspace/getac_camera_test/getac-camera-test/allure-results2/* /home/jenkins/agent/workspace/getac_camera_test/getac-camera-test/allure-results'
                script {
                        allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [
                            [path: "allure-results"]
                            ]
                        ])
                    }   
                }
            }
        }
    // stage("Cleanup") {
    //         steps {
    //             catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
    //                     node('master') {
    //                     //cleanWs() only clean workspace directory not agent script workspace
    //                     sh 'rm -rf /home/blocka/mnt/jenkins-data/workspace/TPI_test@script' //change to your script dir
    //                 }
    //             }
    //         }
    //     }   
    }  
}